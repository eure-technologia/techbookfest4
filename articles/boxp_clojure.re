
= 第二言語としてのClojure

こんにちは！株式会社エウレカでフロントエンドエンジニアをしているBOXP(@If_I_were_boxp)です:)
最近はスキーにどっぷりとハマっており、少し休みが取れるやいなやスキー場へと直行する日々を過ごしています。
夏にもできるアウトドアな趣味が全くないため、今から夏が心配です。

== はじめに

この章は、フロントエンド・サーバーサイド・ネイティブアプリケーション等の多種多様な場面で活躍している関数型言語、Clojureへの入門から実践までをわずか10ページで説明しようとするものです。

前提知識が無くても困らないよう配慮して書いていますが、以下の項目に当てはまっているとより理解しやすい内容になっているかもしれません。

	* 一つ以上のプログラミングを使っての開発経験がある
	* フロントエンド・サーバーサイド・ネイティブアプリケーションいずれかでの開発経験がある
	* コマンドラインでの操作に慣れている

はじめに、Clojureについてざっくりと説明致します。

== Why Clojure?

ClojureはJVM上・Webブラウザ上・.NET上で動作するマルチパラダイム言語ですが、このような言語の存在は今日ではそこまで珍しいものではなく、それぞれのプラットフォームに根付いた言語はもちろんのこと数多くの選択肢が存在します。
しかし、Clojureはその他数多くの言語に一線を成すユニークな特徴を多く持ち、以下のような唯一無二の武器を持っています。

	* 高機能なREPLによる高速アプリケーション開発
	* 不変データ構造の強制によるメンテナンス性向上
	* 「Data as a Code」の原則による生産性向上

それぞれが一体どういう意味なのか、一つずつ説明していきます。

=== 高機能なREPLによる高速アプリケーション開発

REPL(Read Eval Print Loop)は

=== 不変データ構造の強制によるメンテナンス性向上

=== 「Data as a Code」の原則による生産性向上

== Clojureの世界へようこそ！

=== 全ての道はLeiningenから

=== はじめてのプロジェクト

=== Clojureの基本

=== JavaScriptのコードをClojureで書き直す　

== Clojureと3つの世界を旅しよう

=== Ringでサーバーサイドアプリケーションを作る

=== React.jsでフロントエンドアプリケーションを作る

=== ReactNativeでネイティブアプリケーションを作る
